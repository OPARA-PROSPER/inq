#!/usr/bin/env ruby

# frozen_string_literal: true

require "how_is"
require "how_is/cli"
require "date"

begin
  result = HowIs::CLI.parse(ARGV)
rescue HowIs::CLI::OptionsError => e
  raise if ENV["SHOW_TRACE"]

  abort "Error: #{e.message}"
end

options = result[:options]

if options[:help]
  puts result[:opts]
  exit
elsif options[:version]
  puts HowIs::VERSION
  exit
end

# TODO: Once retroactive issue reports are done, allow exe/how_is to be passed
#       other dates.
today = DateTime.now.strftime("%Y-%m-%d")

begin
  if options[:config]
    reports = HowIs.from_config(YAML.load_file(options[:config]), today)

    reports.each { |file, report| HowIs::Report.save_report(file, report) }
  else
    report =
      if options[:from]
        json_report = File.open(options[:from]).read
        HowIs.from_json(json_report)
      else
        HowIs.new(options[:repository], today)
      end

    HowIs::Report.save_report(
      options[:report],
      HowIs::Report.to_format_based_on(options[:report], report)
    )
  end
rescue => e
  raise if ENV["SHOW_TRACE"]

  abort "Error: #{e.message}"
end
