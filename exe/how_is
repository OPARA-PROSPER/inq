#!/usr/bin/env ruby

# frozen_string_literal: true

require "how_is"
require "how_is/cli"
require "date"

begin
  result = HowIs::CLI.parse(ARGV)
rescue HowIs::CLI::OptionsError => e
  raise if ENV["SHOW_TRACE"]

  abort "Error: #{e.message} (See --help for usage.)"
end

options = result[:options]

if options[:help]
  puts result[:opts]
  exit
elsif options[:version]
  puts HowIs::VERSION
  exit
end

# TODO: Once retroactive issue reports are done, allow exe/how_is to be passed
#       other dates.
#today = DateTime.now.strftime("%Y-%m-%d")
date = ARGV[0]

begin
  if options[:config]
    reports = HowIs.from_config(YAML.load_file(options[:config]), date)

    reports.each { |file, report| report.save_as(file) }
  else
    report =
      if options[:from]
        json_report = File.open(options[:from]).read
        HowIs.from_json(json_report)
      else
        HowIs.new(options[:repository], date)
      end

    report_format = options[:report].split('.').last
    File.write(options[:report], report.send("to_#{report_format}"))
    report.save_as(options[:report])
  end
rescue => e
  raise if ENV["SHOW_TRACE"]

  abort "Error: #{e.message}"
end
